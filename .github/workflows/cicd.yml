name: Deploy to Amazon ECS CI/CD

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: user-repo
  ECS_SERVICE: user-service
  ECS_CLUSTER: allclear_cluster
  CONTAINER_NAME: user-container

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create application.yml
        if: contains(github.ref, 'main')
        run: |
          cd ./src/main
          mkdir -p resources 
          cd ./resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash

      - name: Save certificates to files
        run: |
          echo "${{ secrets.CERTIFICATE }}" > certificate.crt
          echo "${{ secrets.CERTIFICATE_CHAIN }}" > certificate_chain.crt
          echo "${{ secrets.PRIVATE_KEY }}" > private_key.key

      - name: Combine certificates into a PEM file
        run: |
          cat certificate.crt certificate_chain.crt > fullchain.pem

      - name: Add CA certificate to Java keystore
        run: |
          sudo keytool -import -noprompt -trustcacerts -alias exampleCA -file fullchain.pem -keystore $JAVA_HOME/lib/security/cacerts -storepass changeit

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Write ECS task definition to file
        run: echo "${{ secrets.ECS_TASK_DEFINITION_JSON }}" > user-task.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: user-task.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
